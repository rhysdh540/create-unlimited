plugins {
    id 'architectury-plugin' version "${arch_plugin_version}" apply false
    id 'dev.architectury.loom' version "${loom_version}" apply false
	id 'com.github.johnrengelman.shadow' version "${shadow_version}" apply false

    id 'io.github.pacifistmc.forgix' version "${forgix_version}"
	id 'io.github.p03w.machete' version '2.0.1'
}

setup()
import io.github.p03w.machete.config.MachetePluginExtension
import io.github.p03w.machete.tasks.OptimizeJarsTask
setupForgixAndMachete()

allprojects {
	apply plugin: 'java'

	archivesBaseName = rootProject.archives_base_name
	version = modVersion
	group = rootProject.maven_group

	tasks.withType(JavaCompile).configureEach {
		options.encoding = 'UTF-8'
		options.release.set(17)
		options.compilerArgs += ['-Xplugin:Manifold', '-implicit:none']
	}
}

architectury {
	minecraft = minecraft_version
	compileOnly()
}

clean { delete '.architectury-transformer' }

jar { enabled = false }

subprojects {
    apply from: rootProject.file('gradle/subprojects.gradle')
	remapJar.finalizedBy(mergeJars)
}

def defineMixins() {
    def mixins = new ArrayList<String>()

	rootProject.subprojects.each {
		it.file('src/main/resources/').listFiles().each { file ->
			if (file.name.endsWith('mixins.json')) {
				mixins.add(file.name)
			}
		}
	}

    ext.mixins = mixins
}

def setup() {
	println 'Create Unlimited v' + mod_version
	String buildNumber = System.getenv('GITHUB_RUN_NUMBER')
	if(buildNumber != null) {
		println 'Build #' + buildNumber
		ext.build_number = buildNumber
	} else ext.build_number = null
	println()

	ext.modVersion = mod_version + (build_number != null ? "-build.${build_number}" : '')

	apply from: 'gradle/properties.gradle'

	println '\nPlugin versions:'
	apply plugin: 'architectury-plugin'

	defineMixins()

	tasks.register('nukeGradleCaches') {
		group = 'build'
		doLast {
			allprojects.each {
				it.file('.gradle').deleteDir()
			}
		}
	}
}

def setupForgixAndMachete() {
	forgix {
		group = project.group
		mergedJarName = "createunlimited-${modVersion}.jar"
		outputDir = 'build/libs/merged'
	}

	machete {
		ignoredTasks.add('jar')

		jij.enabled = false
		png.enabled = false
		json.enabled = true
	}

	tasks.register('optimizeMergeJars', OptimizeJarsTask) {
		dependsOn mergeJars
		//noinspection GrDeprecatedAPIUsage
		buildDir = project.buildDir
		extension = project.extensions.getByType(MachetePluginExtension)
		inputs.file(forgix.outputDir + File.separator + forgix.mergedJarName)
	}

	mergeJars.finalizedBy(optimizeMergeJars)
}
