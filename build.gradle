plugins {
    id 'architectury-plugin' version "${arch_plugin_version}" apply false
    id 'dev.architectury.loom' version "${loom_version}" apply false
	id 'com.github.johnrengelman.shadow' version "${shadow_version}"

    id 'io.github.pacifistmc.forgix' version "${forgix_version}"
}

setup()

allprojects {
	apply plugin: 'java'

	archivesBaseName = rootProject.archives_base_name
	version = modVersion
	group = rootProject.maven_group

	tasks.withType(JavaCompile).configureEach {
		options.encoding = 'UTF-8'
		options.release.set(17)
	}
}

forgix {
	mergedJarName = "createunlimited-${modVersion}.jar"
	outputDir = 'build/libs/merged'
}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply from: rootProject.file('gradle/subprojects.gradle')
	remapJar.finalizedBy(mergeJars)
}

clean {
	delete '.architectury-transformer'
}

tasks.register('nukeGradleCaches') {
	group = 'build'
	doLast {
		allprojects.each {
			it.file('.gradle').deleteDir()
		}
	}
}

jar {
	enabled = false
}

def defineMixins() {
    def mixins = new ArrayList<String>()

	rootProject.subprojects.each {
		it.file('src/main/resources/').listFiles().each { file ->
			if (file.name.endsWith('mixins.json')) {
				mixins.add(file.name)
			}
		}
	}

    ext.mixins = mixins
}

def setup() {
	println 'Create Unlimited v' + mod_version
	String buildNumber = System.getenv('GITHUB_RUN_NUMBER')
	if(buildNumber != null) {
		println 'Build #' + buildNumber
		ext.build_number = buildNumber
	} else ext.build_number = null
	println()

	ext.modVersion = mod_version + (build_number != null ? "-build.${build_number}" : '')

	apply from: 'gradle/preprocessor.gradle'

	println '\nPlugin versions:'
	apply plugin: 'architectury-plugin'

	defineMixins()
}
