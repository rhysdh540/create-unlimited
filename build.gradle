plugins {
    id 'architectury-plugin' version "${arch_plugin_version}" apply false
    id 'dev.architectury.loom' version "${loom_version}" apply false
	id 'io.github.juuxel.loom-vineflower' version "${vineflower_version}" apply false
	id 'com.github.johnrengelman.shadow' version "${shadow_version}" apply false

    id 'io.github.pacifistmc.forgix' version "${forgix_version}"
}
setup()

def modVersion = mod_version + (build_number != null ? "-build.${build_number}" : '')

forgix {
    group = maven_group
    mergedJarName = "createunlimited-${modVersion}+mc${minecraft_version}.jar"
	outputDir = 'build/libs/merged'
}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply from: rootProject.file('gradle/subprojects.gradle')
}

allprojects {
    apply plugin: 'java'

    archivesBaseName = rootProject.archives_base_name
    version = modVersion
    group = rootProject.maven_group

    repositories {
        maven { url 'https://jitpack.io' }
    }

	tasks.withType(JavaCompile).configureEach {
		options.encoding = 'UTF-8'
		options.release = 17
	}
}

jar {
	enabled = false
}

def defineMixins() {
    def mixins = new ArrayList<String>()

	rootProject.subprojects.each {
		it.file('src/main/resources/').listFiles().each { file ->
			if (file.name.endsWith('mixins.json')) {
				mixins.add(file.name)
			}
		}
	}

    ext.mixins = mixins
}

def setup() {
	println 'Create Unlimited v' + mod_version
	String buildNumber = System.getenv('GITHUB_RUN_NUMBER')
	if(buildNumber != null) {
		println 'Build #' + buildNumber
		ext.build_number = buildNumber
	} else ext.build_number = null
	println()

	apply from: 'gradle/preprocessor.gradle'
	apply from: 'gradle/accesswidener.gradle'

	println '\nPlugin versions:'
	apply plugin: 'architectury-plugin'

	defineMixins()
}

subprojects {
	remapJar.finalizedBy(mergeJars)
}
