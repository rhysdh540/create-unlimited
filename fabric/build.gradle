plugins {
    id "com.github.johnrengelman.shadow" version "${shadow_version}"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
	maven { url "https://maven.terraformersmc.com/releases/" } // Mod Menu
	maven { url "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
	maven { url "https://maven.cafeteria.dev/releases" } // Fake Player API
	maven { url "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
}

dependencies {
	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api}+${rootProject.minecraft_version}"
    runtimeOnly 'org.joml:joml:1.10.4' // Don't know why fabric api needs this

    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu}"

	modImplementation("com.simibubi.create:create-fabric-${rootProject.minecraft_version}:${rootProject.create_fabric}+mc${rootProject.minecraft_version}")

	if(rootProject.hasProperty("snr")) {
		modImplementation("com.railwayteam.railways:Steam_Rails-fabric-${minecraft_version}:${snr}+fabric-mc${minecraft_version}-build.${snr_build}") { transitive = false }
	}
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon, project.configurations.shade]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
