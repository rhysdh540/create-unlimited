def mcVersion = ""

def mcVers = rootProject.fileTree('versionProperties').files.name
for(int i = 0; i < mcVers.size(); i++) {
	mcVers[i] = mcVers[i].replaceAll('\\.properties', '')
}
mcVers.sort()

int mcIndex = -1

println "Setting up preprocessor...\nAvalible Minecraft Versions: ${mcVers.join(', ')}"

if (project.hasProperty("mcVer")) {
	mcVersion = mcVer
	mcIndex = mcVers.indexOf(mcVer)
}

if (mcIndex == -1) {
	println "No mcVer set or the set mcVer is invalid!"
	println "Use -PmcVer='mc_version' or edit gradle.properties to set the minecraft version."
	throw new Exception("Invalid Minecraft Version")
}

println "Using Minecraft ${mcVersion}"

def properties = new Properties()

properties.load(new FileInputStream("$rootProject.rootDir/versionProperties/${mcVersion}.properties"))

properties.each {
	ext.set(it.key, it.value)
}

def redefineList = new ArrayList<String>()
for (int i = 0; i < mcVers.size(); i++) {
	String mcStr = "MC_" + mcVers[i].replace(".", "_")

	if (mcIndex < i)
		redefineList.add("PRE_$mcStr")

	if (mcIndex <= i)
		redefineList.add("PRE_CURRENT_$mcStr")

	if (mcIndex == i)
		redefineList.add(mcStr)

	if (mcIndex > i)
		redefineList.add("POST_$mcStr")

	if (mcIndex >= i)
		redefineList.add("POST_CURRENT_$mcStr")
}

StringBuilder sb = new StringBuilder()
	.append('# DO NOT EDIT\n')
	.append("# Generated by the build script. Change mcVer property to change minecraft version.\n\n")

for (String redefinedVersion : redefineList) {
	sb.append(redefinedVersion).append('=\n')
}

new File(projectDir, 'build.properties').text = sb.toString()


allprojects {
	tasks.withType(JavaCompile).configureEach {
		options.compilerArgs += ['-Xplugin:Manifold']
	}
}