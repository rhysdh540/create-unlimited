apply plugin: 'dev.architectury.loom'
apply plugin: 'architectury-plugin'

def awFile = project(':common').file("src/main/resources/createunlimited.accesswidener")

loom {
	silentMojangMappingsLicense()

	if(awFile.exists()) {
		accessWidenerPath = awFile
	}
}

java.withSourcesJar()

configurations {
	shade
	implementation.extendsFrom shade
}

repositories {
	mavenCentral()
	maven 'https://maven.parchmentmc.org'
	maven 'https://maven.quiltmc.org/repository/release'
	maven 'https://maven.ithundxr.dev/releases'
	maven 'https://mvn.devos.one/snapshots'
	maven 'https://maven.cafeteria.dev/releases'
	maven 'https://maven.jamieswhiteshirt.com/libs-release'
	maven 'https://maven.theillusivec4.top'
	maven 'https://maven.terraformersmc.com/releases'
	maven 'https://jitpack.io'//, ['com.github.Chocohead']

	maven 'https://maven.tterrag.com', [
	    'com.simibubi.create',
		'com.jozufozu.flywheel',
		'com.tterrag.registrate'
	]

	maven 'https://api.modrinth.com/maven', ['maven.modrinth']
	maven 'https://cursemaven.com', ['curse.maven']
}

dependencies {
	minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
	mappings(loom.layered {
		it.mappings("org.quiltmc:quilt-mappings:${rootProject.minecraft_version}+build.${rootProject.quilt}:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment}@zip")
		it.officialMojangMappings { nameSyntheticMembers = false }
	})

	annotationProcessor("systems.manifold:manifold-preprocessor:${manifold_version}")
	annotationProcessor(compileOnly("systems.manifold:manifold-props:${manifold_version}"))

	annotationProcessor compileOnly("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras}")
	//annotationProcessor include("com.github.bawnorton.mixinsquared:mixinsquared-${p.name}:${rootProject.mixin_squared}")
}

processResources {
	def properties = [
		version          : rootProject.modVersion,
		minecraft_version: minecraft_version,
		forge            : forge.split("\\.")[0],
		fabric           : fabric,
		fabric_api       : fabric_api,
		create_forge     : create_forge.split("-")[0],
		create_fabric    : create_fabric,
	]

	exclude '**/*.aw'

	inputs.properties properties

	filesMatching('fabric.mod.json') {
		expand properties
	}

	filesMatching('META-INF/mods.toml') {
		expand properties
	}
}

def maven(String path) {
	maven(path, [])
}

def maven(String path, List<String> includes) {
	repositories.maven {
		url = path
		content {
			includes.each {
				includeGroup(it)
			}
		}
	}
}
